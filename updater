#!/usr/bin/env php
<?php
//
// This script is expected to be run from the root of the laravel project
//

require getcwd().'/vendor/autoload.php';

$latestVersion = '11.0';

$laravelVersion = exec("composer show laravel/framework | grep versions |awk '{print $4}'");
$laravelVersion = str_replace('v', '', $laravelVersion);

echo "Currently running Laravel Version: ". red($laravelVersion) ."\n";
echo "Currently using PHP Version: ". blue(PHP_VERSION) ."\n";

if(version_compare($laravelVersion, '9.0', '<')) {
    echo "Updating Laravel $laravelVersion to 9\n";
    updateToLaravel9();
}

if(version_compare($laravelVersion, '10.0', '<') && version_compare($laravelVersion, '9.0', '>=')) {
    echo "Updating Laravel $laravelVersion to 10\n";
    updateToLaravel10();
}

if(version_compare($laravelVersion, '11.0', '<') && version_compare($laravelVersion, '10.0', '>=')) {
    echo "Updating Laravel $laravelVersion to 11\n";
    updateToLaravel11();
}


function updateToLaravel9(){
    if(version_compare(PHP_VERSION, '8.0.2', '<')) {
       echo "PHP version must be >= 8.0.2 to support Laravel 9. Please update PHP and try again.";
       return;
    }
    $updatePackages = [
        "laravel/framework" => "^9.0",
    ];

    $updateDevPackages = [
        "spatie/laravel-ignition" => "^1.0",
        "nunomaduro/collision" => "^6.1"
    ];

    $removals = [
        'fruitcake/laravel-cors',
        'fideloper/proxy'
    ];

    $devRemovals = [
        'facade/ignition'
    ];
    exec("git checkout -b update/laravel-9");

    updateComposerPackages($updatePackages);
    updateComposerPackages($updateDevPackages, true);

    removeComposerPackage($removals);
    removeComposerPackage($devRemovals, true);

    $optionalUpdates = [
        "litstack/pages" => "*",
        "litstack/meta" => "*"
    ];

    updateOptionalCompsoerPackages($optionalUpdates);

    exec("composer update -W", $output, $result_code);
    
    exec("git add .");
    
    exec("git commit -m 'Update to Laravel 9'");

    if($result_code !== 0) {
        echo "Error occurred during composer update. Please check logs and try again.";

        exec("git restore composer.json");
        exec("git checkout - "); // back to previous branch
        exec("git branch -D update/laravel-9");
        return;
    }

    success("Laravel 9 updated successful!");

    // https://laravel.com/docs/9.x/upgrade#the-assert-deleted-methody
    $trustProxyMiddleware = file_get_contents('app/Http/Middleware/TrustProxies.php');
    if(str_contains($trustProxyMiddleware, 'use Fideloper\Proxy\TrustProxies as Middleware;')) {
        $trustProxyMiddleware = str_replace('use Fideloper\Proxy\TrustProxies as Middleware;', 'use Illuminate\Http\Middleware\TrustProxies as Middleware;', $trustProxyMiddleware);
        file_put_contents('app/Http/Middleware/TrustProxies.php', $trustProxyMiddleware);
    }

    //https://github.com/fruitcake/laravel-cors?tab=readme-ov-file#note-for-users-upgrading-to-laravel-9-10-or-higher
    $httpKernel = file_get_contents('app/Http/Kernel.php');
    if(str_contains($httpKernel, '\Fruitcake\Cors\HandleCors::class')) {
        $httpKernel = str_replace('\Fruitcake\Cors\HandleCors::class', '\Illuminate\Http\Middleware\HandleCors::class', $httpKernel);
        file_put_contents('app/Http/Kernel.php', $httpKernel);
    }

}

function updateToLaravel10(){
    if(version_compare(PHP_VERSION, '8.1', '<')) {
       echo "PHP version must be >= 8.1 to support Laravel 10. Please update PHP and try again.";
       return;
    }

    $removals = ['fruitcake/laravel-cors'];

    $devUpdates = [
        'nunomaduro/collision' => '^7.0',
        'spatie/laravel-ignition' => '^2.0',
        'phpunit/phpunit' => '^10.0'
    ];

    $packageUpdates = [
        "laravel/framework" => "^10.0",
    ];

    $optionalUpdates = [
        "laravel/sanctum" => "^3.0",
    ];

    exec("git checkout -b update/laravel-10", $output, $result_code);

    updateComposerPackages($packageUpdates);
    updateComposerPackages($devUpdates, true);
    removeComposerPackage($removals);
    updateOptionalCompsoerPackages($optionalUpdates);


    exec("composer update -W", $output, $result_code);

    exec("git add .");

    exec("git commit -m 'Update to Laravel 10'");

  
    if($result_code !== 0) {
        echo "Error occurred during composer update. Please check logs and try again.";

        exec("git restore composer.json");
        exec("git checkout - "); // back to previous branch
        exec("git branch -D update/laravel-10");

        return;
    }

}

function updateToLaravel11(){
    if(version_compare(PHP_VERSION, '8.2', '<')) {
       echo "PHP version must be >= 8.2 to support Laravel 11. Please update PHP and try again.";
       return;
    }

    $packageUpdates = [
      "laravel/framework" => "^11.0",
    ];

    $devPackageUpdates = [
        "nunomaduro/collision" => "^8.1",
    ];

    $optionalUpdates = [
        "laravel/sanctum" => "^4.0",
        "inertiajs/inertia-laravel" => "^1.0",
        "laravel/breeze" => "^2.0",
    ];

    
    exec("git checkout -b update/laravel-10", $output, $result_code);

    updateComposerPackages($packageUpdates);
    updateComposerPackages($devPackageUpdates, true);

    updateOptionalCompsoerPackages($optionalUpdates);


    exec("composer update -W", $output, $result_code);

    exec("git add .");

    exec("git commit -m 'Update to Laravel 10'");
 
    if($result_code !== 0) {
        echo "Error occurred during composer update. Please check logs and try again.";

        exec("git restore composer.json");
        exec("git checkout - "); // back to previous branch
        exec("git branch -D update/laravel-10");

        return;
    }

    // Publish Sanctum migrations if Sanctum is installed
    // https://laravel.com/docs/11.x/upgrade#updating-dependencies
    if(in_array('laravel/sanctum', array_keys(getComposerDependencies()))){
        exec("php artisan vendor:publish --tag=sanctum-migrations");
    }

}



function updateComposerPackages($packages = [], $dev = false){
    $flag = $dev ? '--dev' : '';

    foreach($packages as $package => $version){
        echo "Updating $package to $version" . PHP_EOL;
        exec("composer require $package:$version $flag --no-update");
    }
}

function updateOptionalCompsoerPackages($packages = [], $dev = false){
    $flag = $dev ? '--dev' : '';
    $dependencies = $dev ? getComposerDevDependencies() : getComposerDependencies();

    foreach($packages as $package => $version){
        if(array_key_exists($package, $dependencies)) {
            echo "Updating $package to $version" . PHP_EOL;
            exec("composer require $package:$version $flag --no-update");
        }
    }
}

function removeComposerPackage($removedPackages = [], $dev = false) {
    $dependencies = $dev ? getComposerDevDependencies() : getComposerDependencies();

    $flag = $dev ? '--dev' : '';
    foreach($removedPackages as $removal){
        if(array_key_exists($removal, $dependencies)) {
            echo "Removing $removal package" . PHP_EOL;
            exec("composer remove $removal $flag --no-update");
        } else
        {
            echo "Package $removal is not currently installed. Skipping removal." . PHP_EOL;
        }
    }
}

function getComposerDevDependencies(){
    $composerJson = json_decode(file_get_contents('composer.json'), true);
     return $composerJson['require-dev'];
}

function getComposerDependencies(){
     $composerJson = json_decode(file_get_contents('composer.json'), true);
     return $composerJson['require'];
}



function info($string){
    echo blue($string) . PHP_EOL;
}

function success($string){
    echo green($string) . PHP_EOL;
}

function warning($string){
    echo yellow($string) . PHP_EOL;
}

function danger($string){
    echo red($string) . PHP_EOL;
}

function red($string){
    return colorize($string, "red");
}

function green($string){
    return colorize($string, "green");
}

function yellow($string){
    return colorize($string, "yellow");
}

function blue($string){
    return colorize($string, "blue");
}

// Function to colorize text
function colorize($text, $color) {
    $colors = [
        'reset' => "\033[0m",
        'red' => "\033[0;31m",
        'green' => "\033[0;32m",
        'yellow' => "\033[0;33m",
        'blue' => "\033[0;34m",
        'purple' => "\033[0;35m",
        'cyan' => "\033[0;36m",
        'white' => "\033[0;37m"
    ];
    return $colors[$color] . $text . $colors['reset'];
}
